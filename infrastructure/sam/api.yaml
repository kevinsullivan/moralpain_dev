openapi: "3.0.1"
info:
  title: MoralDistress API
  description: MoralDistress API.
  version: 1.0.0
  x-logo: 
    url: 'https://moralpain-site.s3.amazonaws.com/docs/assets/icon.svg'
    altText: 'MoralDistress Logo'
paths:
  /survey:
    get:
      operationId: getSurvey
      summary: Get the MDQ
      description: >
        Fetch the latest moral distress questionnaire (MDQ) from the database.
      tags:
        - User
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/survey'
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/questionnaire.json
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_survey_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    post:
      operationId: submitSurvey
      summary: Submit a completed MDQ
      description: >
        Submit a completed Moral Distress Questionnaire and Moral Distress
        Score to the database.
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submission'
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitSurvey/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_completed_survey_post_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsSurvey
      summary: CORS survey support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /resiliency:
    get:
      operationId: getResiliencyResources
      summary: Get resiliency resources
      description: |
        Fetch the recommended resiliency resources from the database.
      tags:
        - User
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resiliencyResources'
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        httpMethod: get
        type: aws
        uri: arn:aws:apigateway:${AWS::Region}:s3:path/moralpain-resources/resiliency_resources.json
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_resiliency_resources_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    post:
      operationId: submitVisitedResiliencyResources
      summary: Submit visited resiliency resources
      description: |
        Submit the list of resources visited by this user to the database.
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/visitedResiliencyResources'
      responses:
        '200':
          description: |-
            200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
      x-amazon-apigateway-integration:
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmitVisitedResiliencyResources/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_s3_visited_resources_post_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsVisitedResiliencyResources
      summary: CORS resiliency resources support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /admin/submissions:
    get:
      operationId: getSubmissions
      summary: Get survey results
      description: >
        Fetch from the database all of the records that match the
        query parameters.
      tags:
        - Admin
      parameters:
        - in: query
          name: starttime
          description: Minimum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1640995200
        - in: query
          name: endtime
          description: Maximum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1647907200
        - in: query
          name: minscore
          description: Minimum possible score of a record.
          schema:
            type: integer
            minimum: 0
            maximum: 10
          example: 1
        - in: query
          name: maxscore
          description: Maximum possible score of a record.
          schema:
            type: integer
            minimum: 0
            maximum: 10
          example: 5
        - in: query
          name: uuid
          description: >
            If this parameter is specified, all other parameters are ignored
            and only the submission with the given UUID is fetched.
            If no such submission exists, an empty list is fetched.
          schema:
            type: string
          example: f2f2011c8d2547849dfce99ae4b75797
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submissions'
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        # NB (nphair): Post request are always used for invoking a lambda.
        # https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:FetchSubmissions/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_admin_submissions_get_role
        passthroughBehavior : "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsAdminSubmissions
      summary: CORS admin submissions support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
  /admin/analytics:
    get:
      operationId: getAnalytics
      summary: Get data analysis
      description: >
        Perform an analysis on the records in the database that match the query
        paramters.
      tags:
        - Admin
      parameters:
        - in: query
          name: starttime
          description: Minimum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1640995200
        - in: query
          name: endtime
          description: Maximum possible timestamp of a record in UTC seconds since Unix epoch.
          schema:
            type: integer
          example: 1647907200
        - in: query
          name: operation
          description: The analytic operation to perform on the data.
          required: true
          schema:
            type: string
            enum:
              - average
              - count
              - maximum
              - minimum
          example: count
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyticsResult'
        '400':
          description: 400 Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        # NB (nphair): Post request are always used for invoking a lambda.
        # https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html
        httpMethod: post
        type: aws_proxy
        uri : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AnalyzeSubmissions/invocations
        credentials: arn:aws:iam::${AWS::AccountId}:role/apigateway_admin_analytics_get_role
        passthroughBehavior : "when_no_match"
        responses:
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
    options:
      operationId: optionsAdminAnalytics
      summary: CORS admin analytics support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      security:
        - sigv4Reference: []
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Content-Sha256,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}

components:
  securitySchemes:
    sigv4Reference:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    survey:
      type: object
      properties:
        version:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/surveySection'
    surveySection:
      type: object
      properties:
        sectionId:
          type: string
        title:
          type: string
        subtitle:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/surveyOption'
    surveyOption:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
    submissions:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/submission'
    submission:
      type: object
      properties:
        score:
          type: integer
        selections:
          type: array
          items:
            type: string
        timestamp:
          type: integer
        id:
          type: string
    resiliencyResources:
      type: object
      properties:
        version:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/resiliencyResource'
    resiliencyResource:
      type: object
      properties:
        resourceId:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        icon:
          $ref: '#/components/schemas/icon'
    icon:
      type: object
      properties:
        codePoint:
          type: string
        fontFamily:
          type: string
        fontPackage:
          type: string
    visitedResiliencyResources:
      type: object
      properties:
        selections:
          type: array
          items:
            type: string
        timestamp:
          type: integer
    analyticsResult:
      type: object
      properties:
        operation:
          type: string
          enum:
            - average
            - count
            - maximum
            - minimum
        result:
          type: number
        error:
          type: boolean
        errormsg:
          type: string
